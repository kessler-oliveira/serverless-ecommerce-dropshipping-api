service: sed-api-register

plugins:
  - serverless-offline

provider:
  name: aws
  runtime: nodejs8.10
  timeout: 30
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  stackName: ${self:provider.stage}-${self:service.name}
  environment: ${file(env.yml):${self:provider.stage}}
  apiGateway:
    restApiId:
      "Fn::ImportValue": ${self:provider.stage}-sed-api-gateway-restApiId
    restApiRootResourceId:
      "Fn::ImportValue": ${self:provider.stage}-sed-api-gateway-restApiRootResourceId

functions:
  createUser:
    handler: functions/user.create
    events:
      - http:
          path: users
          method: post
          cors: true
  getOneUser:
    handler: functions/user.getOne
    events:
      - http:
          path: users/{id}
          method: get
          cors: true
          authorizer:
            type: CUSTOM
            authorizerId:
              "Fn::ImportValue": ${self:provider.stage}-sed-authorization
  getAllUser:
    handler: functions/user.getAll
    events:
      - http:
          path: users
          method: get
          cors: true
          authorizer:
            type: CUSTOM
            authorizerId:
              "Fn::ImportValue": ${self:provider.stage}-sed-authorization
  updateUser:
    handler: functions/user.update
    events:
      - http:
          path: users/{id}
          method: put
          cors: true
          authorizer:
            type: CUSTOM
            authorizerId:
              "Fn::ImportValue": ${self:provider.stage}-sed-authorization
  destroyUser:
    handler: functions/user.destroy
    events:
      - http:
          path: users/{id}
          method: delete
          cors: true
          authorizer:
            type: CUSTOM
            authorizerId:
              "Fn::ImportValue": ${self:provider.stage}-sed-authorization
  createProduct:
    handler: functions/product.create
    events:
      - http:
          path: products
          method: post
          cors: true
          authorizer:
            type: CUSTOM
            authorizerId:
              "Fn::ImportValue": ${self:provider.stage}-sed-authorization
  getOneProduct:
    handler: functions/product.getOne
    events:
      - http:
          path: products/{id}
          method: get
          cors: true
  getAllProduct:
    handler: functions/product.getAll
    events:
      - http:
          path: products
          method: get
          cors: true
  updateProduct:
    handler: functions/product.update
    events:
      - http:
          path: products/{id}
          method: put
          cors: true
          authorizer:
            type: CUSTOM
            authorizerId:
              "Fn::ImportValue": ${self:provider.stage}-sed-authorization
  destroyProduct:
    handler: functions/product.destroy
    events:
      - http:
          path: products/{id}
          method: delete
          cors: true
          authorizer:
            type: CUSTOM
            authorizerId:
              "Fn::ImportValue": ${self:provider.stage}-sed-authorization
